import sys

class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                       for row in range(vertices)]


    def printMST(self, parent):
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(parent[i],"-", i, self.graph[i][parent[i]])

    def MinKey(self,key,MSTSet):

        min = sys.maxsize      

        for v in range(self.V):
            if key[v] < min and MSTSet[v] == False:
                min = key[v]
                min_index = v

        return min_index

    def primMST(self):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V     
        key[0] = 0
        MSTSet = [False] * self.V

        parent[0] = -1  
        for cout in range(self.V):

            u = self.MinKey(key, MSTSet)

            MSTSet[u] = True

            for v in range(self.V):


                if self.graph[u][v] > 0 and MSTSet[v] == False and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u
                    
        self.printMST(parent)

if __name__ == "__main__":
    g = Graph(5)
    g.graph = [[0, 19, 5, 0, 0],
               [19, 0, 5, 9, 2],
               [5, 5, 0, 1, 6],
               [0, 9, 1, 0, 1],
               [0, 2, 6, 1, 0]]
    g.primMST() 
